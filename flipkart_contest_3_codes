### Covid Spread
# Problem
  
  Aterp is the head nurse at city hospital. City hospital contains R*C number of wards and structure of hospital is in the form of a 2-D matrix.
Given a matrix of dimension R*C where each cell in the matrix can have values 0, 1 or 2 which has the following meaning:
0 : Empty ward
1 : Cells have uninfected patients
2 : Cells have infected patients

An infected patient at ward [i,j] can infect other uninfected patient at indexes [i-1,j], [i+1,j], [i,j-1], [i,j+1] (up, down, left and right) in unit time. Help Aterp determine the minimum units of time after which there won't remain any uninfected patient i.e all patients would be infected. If all patients are not infected after infinite units of time then simply return -1.

# Sample Input and Output

  Input:
  3 5
  2 1 0 2 1
  1 0 1 2 1
  1 0 0 2 1 
  Output:
  2

  Explanation:
  Patients at positions {0,0}, {0, 3}, {1, 3}
  and {2, 3} will infect patient at {0, 1}, 
  {1, 0},{0, 4}, {1, 2}, {1, 4}, {2, 4} during 1st 
  unit time. And, during 2nd unit time, patient at 
  {1, 0} will get infected and will infect patient 
  at {2, 0}. Hence, total 2 unit of time is required 
  to infect all patients.
 
  Input:
  3 5
  2 1 0 2 1
  0 0 1 2 1
  1 0 0 2 1

  Output:
  -1

  Explanation:
  All patients will not be infected.
  
 # Source Code (Java)
 
  class Solution{
     public int helpaterp(int[][] hospital) {
        // code here
        int uninfected = 0;
        int time = 0;
        Queue <int []> q = new LinkedList<>();
        for(int i=0;i<hospital.length;i++){
            for(int j=0;j<hospital[0].length;j++){
                if(hospital[i][j] == 1){
                    uninfected += hospital[i][j];
                }
                else if(hospital[i][j] == 2){
                    q.add(new int[]{i,j});
                }
            }
        }
        int[][] directions = {{0,1},{1,0},{-1,0},{0,-1}};
        while(uninfected>0 && !q.isEmpty()){
            time += 1;
            int size = q.size();
            while(size-- > 0){
                int xy[] = q.poll();
                for(int d[] : directions){
                    int x = xy[0] + d[0];
                    int y = xy[1] + d[1];
                    if(x<0 || x>=hospital.length || y<0 || y>=hospital[0].length || hospital[x][y] == 2 || hospital[x][y] == 0){
                        continue;
                    }
                    q.add(new int[]{x,y,});
                    hospital[x][y] = 2;
                    uninfected -= 1;
                }
            }
        }
        if(uninfected == 0){
            return time;
        }
        return -1;
        
    }
    
}

### Find a pair with given target in BST

* Not Solved *

### Next Permutation

* Not Solved *
